# Generated by Django 4.1.4 on 2023-01-28 02:20

import functools
import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import web_server.service.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Isotope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('name', models.CharField(max_length=6, unique=True)),
            ],
            options={
                'verbose_name': 'Isotope',
                'verbose_name_plural': 'Isotopes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('quantity_of_analyzes', models.PositiveIntegerField(default=0, verbose_name='Amount of analysis')),
                ('remaining_of_analyzes', models.PositiveIntegerField(default=0, verbose_name='Remaning of analysis')),
                ('price', models.DecimalField(decimal_places=2, max_digits=14, verbose_name='Price')),
                (
                    'status_payment',
                    models.CharField(
                        choices=[('APG', 'Aguardando pagamento'), ('CON', 'Confirmado')],
                        default='APG',
                        max_length=3,
                        verbose_name='Status payment',
                    ),
                ),
                (
                    'service_name',
                    models.CharField(
                        choices=[
                            ('DC', 'Dosimetria Clínica'),
                            ('PCD', 'Dosimetria Pré-Clínica'),
                            ('SQ', 'Segmentação e Quantificação'),
                            ('RA', 'Radiosinoviortese'),
                            ('MC', 'Modelagem Computacional'),
                        ],
                        max_length=3,
                        verbose_name='Service name',
                    ),
                ),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(max_length=20, verbose_name='Code')),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Calibration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'calibration_name',
                    models.CharField(
                        max_length=24,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name='Calibration Name',
                    ),
                ),
                (
                    'syringe_activity',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Syringe Activity'
                    ),
                ),
                (
                    'residual_syringe_activity',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name='Residual Syringe Activity',
                    ),
                ),
                ('measurement_datetime', models.DateTimeField(verbose_name='Measurement Datetime')),
                (
                    'phantom_volume',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Phantom Volume'
                    ),
                ),
                (
                    'acquisition_time',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Acquisition Time'
                    ),
                ),
                (
                    'images',
                    models.FileField(
                        upload_to=functools.partial(
                            web_server.service.models.upload_to, *(), **{'type': 'calibration'}
                        ),
                        verbose_name='Calibration Images',
                    ),
                ),
                (
                    'isotope',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='calibrations', to='service.isotope'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='calibrations',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'Calibration',
                'verbose_name_plural': 'Calibrations',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'calibration_name')},
            },
        ),
        migrations.CreateModel(
            name='SegmentationAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'analysis_name',
                    models.CharField(
                        max_length=24,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name='Analysis Name',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('DS', 'Dados enviados'),
                            ('AI', 'Verificando informações'),
                            ('II', 'Informações inválidas'),
                            ('PR', 'Processando a análise'),
                            ('CO', 'Análise concluída'),
                        ],
                        default='DS',
                        max_length=3,
                        verbose_name='Status',
                    ),
                ),
                (
                    'report',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=functools.partial(web_server.service.models.upload_to, *(), **{'type': 'report'}),
                        verbose_name='Report',
                    ),
                ),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(max_length=30, verbose_name='Code')),
                ('message_to_user', models.TextField(blank=True, default='', verbose_name='Message to user')),
                (
                    'images',
                    models.FileField(
                        upload_to=functools.partial(
                            web_server.service.models.upload_to, *(), **{'type': 'segmentation_analysis'}
                        ),
                        verbose_name='Images',
                    ),
                ),
                (
                    'order',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='segmentation_analysis',
                        to='service.order',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Segmentation Analysis',
                'verbose_name_plural': 'Segmentation Analyzes',
                'db_table': 'segmentation_analysis',
                'ordering': ['-created_at'],
                'unique_together': {('order', 'analysis_name')},
            },
        ),
        migrations.CreateModel(
            name='RadiosynoAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'analysis_name',
                    models.CharField(
                        max_length=24,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name='Analysis Name',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('DS', 'Dados enviados'),
                            ('AI', 'Verificando informações'),
                            ('II', 'Informações inválidas'),
                            ('PR', 'Processando a análise'),
                            ('CO', 'Análise concluída'),
                        ],
                        default='DS',
                        max_length=3,
                        verbose_name='Status',
                    ),
                ),
                (
                    'report',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=functools.partial(web_server.service.models.upload_to, *(), **{'type': 'report'}),
                        verbose_name='Report',
                    ),
                ),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(max_length=30, verbose_name='Code')),
                ('message_to_user', models.TextField(blank=True, default='', verbose_name='Message to user')),
                (
                    'images',
                    models.FileField(
                        upload_to=functools.partial(
                            web_server.service.models.upload_to, *(), **{'type': 'radiosyno_analysis'}
                        ),
                        verbose_name='Images',
                    ),
                ),
                (
                    'isotope',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='radiosyno_analysis',
                        to='service.isotope',
                    ),
                ),
                (
                    'order',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='radiosyno_analysis',
                        to='service.order',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Radiosynoviorthesis Analysis',
                'verbose_name_plural': 'Radiosynoviorthesis Analyzes',
                'db_table': 'radiosyno_analysis',
                'ordering': ['-created_at'],
                'unique_together': {('order', 'analysis_name')},
            },
        ),
        migrations.CreateModel(
            name='PreClinicDosimetryAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'analysis_name',
                    models.CharField(
                        max_length=24,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name='Analysis Name',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('DS', 'Dados enviados'),
                            ('AI', 'Verificando informações'),
                            ('II', 'Informações inválidas'),
                            ('PR', 'Processando a análise'),
                            ('CO', 'Análise concluída'),
                        ],
                        default='DS',
                        max_length=3,
                        verbose_name='Status',
                    ),
                ),
                (
                    'report',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=functools.partial(web_server.service.models.upload_to, *(), **{'type': 'report'}),
                        verbose_name='Report',
                    ),
                ),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(max_length=30, verbose_name='Code')),
                ('message_to_user', models.TextField(blank=True, default='', verbose_name='Message to user')),
                (
                    'injected_activity',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Injected Activity'
                    ),
                ),
                ('administration_datetime', models.DateTimeField(verbose_name='Administration Datetime')),
                (
                    'images',
                    models.FileField(
                        upload_to=functools.partial(
                            web_server.service.models.upload_to, *(), **{'type': 'preclinic_dosimetry'}
                        ),
                        verbose_name='Images',
                    ),
                ),
                (
                    'calibration',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='preclinic_dosimetry_analysis',
                        to='service.calibration',
                    ),
                ),
                (
                    'order',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='preclinic_dosimetry_analysis',
                        to='service.order',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Preclinic Dosimetry',
                'verbose_name_plural': 'Preclinic Dosimetries',
                'db_table': 'preclinic_dosimetry_analysis',
                'ordering': ['-created_at'],
                'unique_together': {('order', 'analysis_name')},
            },
        ),
        migrations.CreateModel(
            name='ClinicDosimetryAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date and Time')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modificatioin Date and Time')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'analysis_name',
                    models.CharField(
                        max_length=24,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name='Analysis Name',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('DS', 'Dados enviados'),
                            ('AI', 'Verificando informações'),
                            ('II', 'Informações inválidas'),
                            ('PR', 'Processando a análise'),
                            ('CO', 'Análise concluída'),
                        ],
                        default='DS',
                        max_length=3,
                        verbose_name='Status',
                    ),
                ),
                (
                    'report',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=functools.partial(web_server.service.models.upload_to, *(), **{'type': 'report'}),
                        verbose_name='Report',
                    ),
                ),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(max_length=30, verbose_name='Code')),
                ('message_to_user', models.TextField(blank=True, default='', verbose_name='Message to user')),
                (
                    'injected_activity',
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Injected Activity'
                    ),
                ),
                ('administration_datetime', models.DateTimeField(verbose_name='Administration Datetime')),
                (
                    'images',
                    models.FileField(
                        upload_to=functools.partial(
                            web_server.service.models.upload_to, *(), **{'type': 'clinic_dosimetry'}
                        ),
                        verbose_name='Images',
                    ),
                ),
                (
                    'calibration',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='clinic_dosimetry_analysis',
                        to='service.calibration',
                    ),
                ),
                (
                    'order',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='clinic_dosimetry_analysis',
                        to='service.order',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Clinic Dosimetry',
                'verbose_name_plural': 'Clinic Dosimetries',
                'db_table': 'clinic_dosimetry_analysis',
                'ordering': ['-created_at'],
                'unique_together': {('order', 'analysis_name')},
            },
        ),
    ]
